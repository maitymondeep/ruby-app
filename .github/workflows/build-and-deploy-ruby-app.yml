name: 'Build and Deploy service for Ruby Project'

on:
  workflow_dispatch:

  pull_request:
    branches:
      - 'develop'
      - 'release/*'
    paths-ignore:
      - 'infrastructure/**'

  push:
    branches:
      - 'develop'
      - 'feature/*'
      - 'release/*'
      - 'hotfix/*'
    paths-ignore:
      - 'infrastructure/**'

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code  ## Checkout Code
        uses: actions/checkout@v4

      - name: Cache Ruby dependencies ## Enabled Cache, to reduce download dependency time for next run
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ruby-${{ runner.os }}-

      - name: Set up Ruby ## Set-up Ruby in GitHub Runner
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
      ## Install Dependencies [Not needed for this application]
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install

      ## Build Ruby application [Not Needed here as it's a simple ruby web server]
      - name: Build Application 
        run: bundle exec rake

      ## Run Unit Test Cases [Not needed for this application]
      - name: Run Unit Tests
        run: bundle exec rspec
      
      ## This will Ananlyse the code and Push report to SonarQube
      - name: SonarQube Analyser 
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.buildbreaker.skip=false

      ## Quality Gate Check [Break the build if Quality Gate Failed]
      - name: SonarQube Quality Gate check
        id: sonarqube_quality_gate_check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_HOST }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST }}

      ## Publish Link in GitHub Summary with Sonar Project link
      - name: "Publish SonarQube Quality Gate Status"
        if: always()
        shell: bash
        run: |
          sonar_dashboard_url=$(cat .scannerwork/report-task.txt | grep 'dashboardUrl' | sed 's/dashboardUrl=//')"
          echo "## :microscope: SonarQube Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          if [[ ${{ steps.sonarqube_quality_gate_check.outputs.quality-gate-status }} == 'PASSED' ]]; then
            echo "### The Quality Gate status is Passed :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          else
            echo "### The Quality Gate status is Failed :x:" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### :point_right: [Click here to see the SonarQube Scan Report]($(sonar_dashboard_url)" >> $GITHUB_STEP_SUMMARY

  component_test:
    name: 'Component test'
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout code ## Checkout Code
        uses: actions/checkout@v2

      - name: Cache Ruby dependencies ## Enabled Cache, to reduce download dependency time for next run
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ruby-${{ runner.os }}-

      - name: Set up Ruby ## Install Ruby in GitHub Runner
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      ## Install Dependencies [Not needed for this application]
      - name: Install dependencies 
        run: |
          gem install bundler
          bundle install

      ## Run Component Test to ensure code quality and functionalities [Not needed for this application]
      - name: Run Component Tests
        run: bundle exec rake component_test

  docker_build_push:
    name: 'Docker Build and Push'
    runs-on: ubuntu-latest
    needs: [ component_test ]
    steps:
    - name: Checkout Repository ## Checkout Repository
      uses: actions/checkout@v3.3.0

    - name: Configure Image Tag
      id: tag
      shell: bash
      run: |
        docker_image_tag=$(git rev-parse --short "$GITHUB_SHA")
        echo "image_tag=$docker_image_tag" >> $GITHUB_OUTPUT

    ## Add Metadata
    - name: Add metadata for Docker
      id: metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/maitymondeep/${{ github.event.repository.name }}
        tags: ${{ steps.tag.outputs.image_tag }}
        labels: |
          branch=${{ github.ref_name }}

    ## Docker Build [only build, not push]
    - name: Docker build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: "${{ steps.metadata.outputs.tags }}"
        labels: "${{ steps.metadata.outputs.labels }}"

    ## Scan image using Trivy [Break the build in case of any vulnerabilities found]
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/maitymondeep/${{ github.event.repository.name }}:${{ steps.tag.outputs.image_tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

    ## Publish Scan result to Security Tab
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    ## Login in to GHCR
    - name: Log in to the GHCR
      uses: docker/login-action@v2
      if: (startsWith(github.ref_name, 'develop') || startsWith(github.ref_name, 'release'))
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_REPO_USERNAME }}
        password: ${{ SECRETS.GHCR_REPO_PASSWORD }}

    ## Docker Push [only from develop/release, feature branches can build the code but restrict to push image. this will save GHCR spcae and cost as well]
    - name: Docker push to GHCR
      if: (startsWith(github.ref_name, 'develop') || startsWith(github.ref_name, 'release'))
      shell: bash
      run: |
        docker push ghcr.io/maitymondeep/${{ github.event.repository.name }}:${{ steps.tag.outputs.image_tag }}

  dev_env:
    name: 'DEV'
    runs-on: ubuntu-latest
    needs: [ docker_build_push ]
    environment:
      name: dev
    permissions:
      actions: write
      contents: write
      deployments: write
    if: startsWith(github.ref_name, 'develop')
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    ## Replace Image_Tag in helm values file
    - name: Update Image Tag Values
      run: |
        helm_chart_directory=infrastructure/helm-values/environments/dev
        new_image_tag=$(git rev-parse --short "$GITHUB_SHA")
        echo "image tag: $new_image_tag"
        sed -i 's/imageTag: "[^"]*"/imageTag: "'"$new_image_tag"'"/' "$helm_chart_directory/dev-values.yaml"     
    
    ## Commit message to the branch
    - name: Commit the changes made
      run: |
        git config --global user.name 'Mondeep Maity'
        git config --global user.email 'mondeep.maity2104@gmail.com'
        git commit -am "updating image tag"
        git push

  dev_sanity:
    name: 'DEV_Sanity'
    runs-on: ubuntu-latest
    needs: [ dev_env ]
    environment:
      name: sanity ## This env has 15 mins sleep time[to get pods ready] before sanity run
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    ## Sanity Check to make sure functionality working fine[if possible]
    - name: Run Sanity Scripts
      shell: bash
      run: echo "Sanity Test needs to be run here"

  qa_env:
    name: 'QA'
    runs-on: ubuntu-latest
    needs: [ docker_build_push ]
    environment:
      name: qa ## This env has approval configured with QA Testers
    permissions:
      actions: write
      contents: write
      deployments: write
    if: startsWith(github.ref_name, 'release')
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    ## Replace Image_Tag in helm values file
    - name: Update Image Tag Values
      run: |
        helm_chart_directory=infrastructure/helm-values/environments/qa
        new_image_tag=$(git rev-parse --short "$GITHUB_SHA")
        echo "image tag: $new_image_tag"
        sed -i 's/imageTag: "[^"]*"/imageTag: "'"$new_image_tag"'"/' "$helm_chart_directory/qa-values.yaml"     
    
    ## Commit message to the branch
    - name: Commit the changes made
      run: |
        git config --global user.name 'Mondeep Maity'
        git config --global user.email 'mondeep.maity2104@gmail.com'
        git commit -am "updating image tag"
        git push

  qa_sanity:
    name: 'QA_Sanity'
    runs-on: ubuntu-latest
    needs: [ qa_env ]
    environment:
      name: sanity ## This env has 15 mins sleep time[to get pods ready] before sanity run
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    ## Sanity Check to make sure functionality working fine[if possible]
    - name: Run Sanity Scripts
      shell: bash
      run: echo "Sanity Test needs to be run here"

  preprod_env:
    name: 'PreProd'
    runs-on: ubuntu-latest
    needs: [ qa_sanity ]
    environment:
      name: preprod ## This env has approval configured with Performance Testers
    permissions:
      actions: write
      contents: write
      deployments: write
    if: startsWith(github.ref_name, 'release')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      ## Replace Image_Tag in helm values file
      - name: Update Image Tag Values
        run: |
          helm_chart_directory=infrastructure/helm-values/environments/preprod
          new_image_tag=$(git rev-parse --short "$GITHUB_SHA")
          echo "image tag: $new_image_tag"
          sed -i 's/imageTag: "[^"]*"/imageTag: "'"$new_image_tag"'"/' "$helm_chart_directory/preprod-values.yaml"     
      
      ## Commit message to the branch
      - name: Commit the changes made
        run: |
          git config --global user.name 'Mondeep Maity'
          git config --global user.email 'mondeep.maity2104@gmail.com'
          git commit -am "updating image tag"
          git push

  preprod_sanity:
    name: 'PreProd_Sanity'
    runs-on: ubuntu-latest
    needs: [ preprod_env ]
    environment:
      name: sanity ## This env has 15 mins sleep time[to get pods ready] before sanity run
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    ## Sanity Check to make sure functionality working fine[if possible]
    - name: Run Sanity Scripts
      shell: bash
      run: echo "Sanity Test needs to be run here"

  prod_env:
    name: 'Prod'
    runs-on: ubuntu-latest
    needs: [ preprod_sanity ]
    environment:
      name: prod ## This env has approval configured with DevOps Team
    permissions:
      actions: write
      contents: write
      deployments: write
    if: startsWith(github.ref_name, 'release')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      ## Replace Image_Tag in helm values file
      - name: Update Image Tag Values
        run: |
          helm_chart_directory=infrastructure/helm-values/environments/prod
          new_image_tag=$(git rev-parse --short "$GITHUB_SHA")
          echo "image tag: $new_image_tag"
          sed -i 's/imageTag: "[^"]*"/imageTag: "'"$new_image_tag"'"/' "$helm_chart_directory/prod-values.yaml"
          
      ## Commit message to the branch
      - name: Commit the changes made
        run: |
          git config --global user.name 'Mondeep Maity'
          git config --global user.email 'mondeep.maity2104@gmail.com'
          git commit -am "updating image tag"
          git push
